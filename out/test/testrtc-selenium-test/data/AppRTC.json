{
    "_id": "5a9abb33b3b15d0011c50c39",
    "testScript": "/*\r\n    This example shows how to automate AppRTC scenarios in testRTC\r\n    \r\n    SCENARIO\r\n    * Browser 1 goes to appr.tc and creates a random room\r\n    * Browser 1 sends room URL to browser 2\r\n    * Browser 2 waits for room URL to arrive\r\n    * Browser 2 joins the room\r\n    * Both browsers run for 2 minutes\r\n    \r\n    SCALING\r\n    To scale the test, change the number of concurrent users.\r\n    You can't change the number of users per session, as AppRTC only\r\n    allows 2 users in a room.\r\n    \r\n    THINGS TO PLAY WITH\r\n    * Probe configurations (look after the script):\r\n      - Location of probes\r\n      - Media files to use\r\n      - Network configuration and quality\r\n      - Browser version\r\n    * Number of concurrent users (in a paid account. Evals limited to 2 max)\r\n    * Service URL - trying VP9 and H264 instead of VP8\r\n    \r\n    NOTES\r\n    We've decided to run AppRTC here with VP8 (look at the Service URL above).\r\n    Just as easily, testRTC can support VP9, H.264 or any other codec and\r\n    feature supported by the browser being used.\r\n*/\r\n\r\n\r\n// Variables that we will use in this example\r\nvar agentType = Number(process.env.RTC_IN_SESSION_ID);\r\nvar sec = 1000;\r\n\r\n\r\n// We set a few expectations. If these don't happen, the test will fail\r\n// In AppRTC case, we want to make sure we have:\r\n// 1. An incoming and outgoing audio and video channels\r\n// 2. Media being sent on these channels\r\nclient\r\n    .rtcSetTestExpectation(\"audio.in == 1\")\r\n    .rtcSetTestExpectation(\"audio.out == 1\")\r\n    .rtcSetTestExpectation(\"video.in == 1\")\r\n    .rtcSetTestExpectation(\"video.out == 1\")\r\n    .rtcSetTestExpectation(\"audio.in.bitrate > 0\")\r\n    .rtcSetTestExpectation(\"audio.out.bitrate > 0\")\r\n    .rtcSetTestExpectation(\"video.in.bitrate > 0\")\r\n    .rtcSetTestExpectation(\"video.out.bitrate > 0\");\r\n\r\nif (agentType === 1) {\r\n    // Browser 1 actions take place here\r\n\r\n    // Open initial AppRTC URL and join a randomly allocated room\r\n\tclient\r\n    \t.url(process.env.RTC_SERVICE_URL)\r\n\t    .waitForElementVisible('body', 10*sec)\r\n\t    .pause(1000)\r\n    \t.click('#join-button')\r\n\t    .waitForElementVisible('#videos', 10*sec)\r\n\t    \r\n    \t.pause(2*sec)\r\n\t    .rtcScreenshot(\"Alone in call\")\r\n\t\r\n\t    // Send the room URL to the second browser\r\n    \t.url(function (result) {\r\n    \t\tthis.assert.equal(typeof result, \"object\");\r\n    \t\tthis.assert.equal(result.status, 0);\r\n    \t\tvar roomUrl = result.value;\r\n    \t\tthis.assert.equal(!!roomUrl, true);\r\n    \t\t\r\n    \t\tclient\r\n    \t\t    .rtcInfo('Sending Room url %s', roomUrl)\r\n        \t\t.rtcProgress(\"Waiting @ \" + roomUrl)\r\n        \t\t.rtcSetSessionValue(\"roomUrl\", roomUrl);\r\n    \t});\r\n\r\n} else {\r\n    // Browser 2 actions take place here\r\n    \r\n    // Wait for Browser 1 to send us the URL for this call\r\n\tclient\r\n    \t.rtcWaitForSessionValue('roomUrl', function (urlToJoin) {\r\n    \t\tclient\r\n    \t\t    .rtcInfo('Joining ', urlToJoin)\r\n    \t\t    .rtcProgress(\"Joining \" + urlToJoin)\r\n    \t\t    .url(urlToJoin)\r\n    \t\t    .waitForElementVisible('body', 30*sec)\r\n    \t\t    .pause(2*sec)\r\n    \t\t    \r\n        \t\t.rtcScreenshot(\"Joining\")\r\n    \t\t    .click('#confirm-join-button')\r\n    \t\t    .waitForElementVisible('#videos', 10*sec);\r\n    \t}, 30*sec);\r\n}\r\n\r\n\r\n// Now that the browser is connected and in the room, we wait\r\n\r\nclient\r\n    .pause(60*sec)\r\n    .rtcScreenshot(\"in call\")\r\n    .pause(60*sec)\r\n\r\n    .rtcProgress(\"Bye\");",
    "browserType": "Chrome",
    "name": "AppRTC example",
    "info": "An example of how to test AppRTC based applications.\n\nIn this case, we can create a random room and have the second browser join that same room without having advance knowledge of the exact URL.",
    "runOptions": "#session:2",
    "serviceUrl": "https://appr.tc/?vsc=VP8&vrc=VP8",
    "testProfiles": [
        {
            "media": "KrankyGeek-2-1080p.mp4",
            "firewall": "FW_NO_FW",
            "network": "No throttling",
            "location": "East-US",
            "browser": "linux-chrome-stable"
        },
        {
            "media": "Salsa-720p.mp4",
            "firewall": "FW_NO_FW",
            "network": "No throttling",
            "location": "Europe",
            "browser": "linux-chrome-stable"
        }
    ],
    "project": "5a9abb33b3b15d0011c50c38",
    "__v": 0,
    "lastRunDate": null,
    "runCount": 0,
    "lastRank": null,
    "lastRankDelta": null,
    "stared": false,
    "serviceUrlOpen": false,
    "def_sort": "apprtc example",
    "parameters": {
        "iterationMode": "loop",
        "loopCount": 1,
        "duration": 10,
        "concurrentUsers": 2
    },
    "isRemote": false,
    "createDate": "2018-03-03T15:11:47.296Z",
    "restangularEtag": "W/\"1235-J5UR1gAJNVQwjrw3itS1Ag\"",
    "route": "5a9abb33b3b15d0011c50c39",
    "reqParams": null,
    "restangularized": true,
    "fromServer": true,
    "parentResource": {
        "route": "test_definitions",
        "parentResource": null
    },
    "restangularCollection": false
}